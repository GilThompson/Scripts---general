}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
pin = c(4,2),
plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
pin = c(4,2),
#plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
#plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
shp@data[,1]
str(r)
##Select raster and plots
r_filename <- choose.files(default =wd,multi =FALSE)
paste(r_filename,".jpg")
file_path_sans_ext(basename(r_filename))
tools::file_path_sans_ext(basename(r_filename))
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
list_plots <- mixedsort(shp@data[,1])
mixedsort(shp@data[,1])
require("gtools") #sorting
mixedsort(shp@data[,1])
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
list_plots <- mixedsort(shp@data[,1])
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
# # # # #Check conditions and quality check needed to be implemented
#
# # # # # check Harcoded inputs every time.
#
####
#library(xlsx) #preferred to read XLSX?
library("XLConnect")
library(reshape2)
#### Libraries used:
require(raster) # For importing rasters and shapefile
require(velox) # For
##Ask for the vector with the zones
zones <- askSHP()
setwd("F:/Dropbox (RSG)/Software/Scripts/r/extract")
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("functions_extract.R") #Check that this is in the working directory
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
##Ask for the vector with the zones
zones <- askSHP()
####EXTRACT####
r_file <- askRaster() #Get th raster name
##   Imports raster as stack to allow multiple bands, uses "velox" object to make raster operations faster
r <- velox(stack(r_file))
#Set output name like the raster (remove extension and path from), save in the output folder
OutTableName <- file.path(outFolder,paste0(tools::file_path_sans_ext(basename(r_file)),".csv"),fsep=.Platform$file.sep)
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
#Set output name like the raster (remove extension and path from), save in the output folder
OutTableName <- file.path(outFolder,paste0(tools::file_path_sans_ext(basename(r_file)),".csv"),fsep=.Platform$file.sep)
## With this we get a table with the values for all the plots and bands
table <- r$extract(zones, df=TRUE, fun=fun) #Perform the extraction with the selected statistic function
table <- r$extract(zones, df=TRUE,
mean)
table
zones$Name
table$ID_sp
## Set ID names from the shapefile
table$ID_sp <- zones$Name
table
ID_field <- "Name"
zones$ID_field
ID_field
zones$ID_field
zones
zones@data[,ID_field]
## Set ID names from the shapefile
table$ID_sp <- zones@data[,ID_field]
table
#Save to disk
write.csv(table,OutTableName, row.names = FALSE)
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
for (i in nrow(inputList)) {
extractThis(inputList[i,1],inputList[i,2], inputList[i,3], inputList[i,4],mean,inputList[i,5]) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("functions_extract.R") #Check that this is in the working directory
for (i in nrow(inputList)) {
extractThis(inputList[i,1],inputList[i,2], inputList[i,3], inputList[i,4],mean,inputList[i,5]) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
for (i in nrow(inputList)) {
extractThis(inputList[i,1],inputList[i,2], inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
as.double(inputList[i,5])
for (i in nrow(inputList)) {
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
for (i in nrow(inputList)) {
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
inputList
for (i in nrow(inputList)) {
print(i)
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
for (i in 1:nrow(inputList)) {
print(i)
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
###################################################################################
#### Script to extract the values from multiband rasters based on vector zones ####
#### Recopilado por Lorena GonzÃ¡lez,  Septiembre 2019                          ####
####___________________________________________________________________________####
#### There are two options for the Inputs:
####  > A.
####    + A CSV file list of the raster, vector, output location and selected statistics. Headers:
####      * raster, vector_zone, output_Folder, zone_ID_field, if_buffer_size
####
####  > B.
####    + A folder that contains all rasters to process
####    + The vector to use as extraction zones
####  > C.
####    + raster
####    + vector
####
####    - Indicate the selected statistics
####    - The statistic table outputs are located at in the root folder of the raster location
####
#### For  the outputs:
####  + individual file per raster with all statistics
####  + datafile with all the bands and dates extracted per field
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("functions_extract.R") #Check that this is in the working directory
#require(raster)
tryCatch({ ## Put it all inside a handle error function
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ ## CSV list of inputs
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(i)
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ # Process all rasters in a folder
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ ## Ask for Raster file
####EXTRACT####
r_file <- askRaster() #Get th raster name
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
},
error = function(e){print(c("Se produjo un error: ",e$message))},
warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
###################################################################################
#### Script to extract the values from multiband rasters based on vector zones ####
#### Recopilado por Lorena GonzÃ¡lez,  Septiembre 2019                          ####
####___________________________________________________________________________####
#### There are two options for the Inputs:
####  > A.
####    + A CSV file list of the raster, vector, output location and selected statistics. Headers:
####      * raster, vector_zone, output_Folder, zone_ID_field, if_buffer_size
####
####  > B.
####    + A folder that contains all rasters to process
####    + The vector to use as extraction zones
####  > C.
####    + raster
####    + vector
####
####    - Indicate the selected statistics
####    - The statistic table outputs are located at in the root folder of the raster location
####
#### For  the outputs:
####  + individual file per raster with all statistics
####  + datafile with all the bands and dates extracted per field
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("functions_extract.R") #Check that this is in the working directory
#require(raster)
tryCatch({ ## Put it all inside a handle error function
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ ## CSV list of inputs
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(i)
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ # Process all rasters in a folder
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ ## Ask for Raster file
####EXTRACT####
r_file <- askRaster() #Get th raster name
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))},
warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
###################################################################################
#### Script to extract the values from multiband rasters based on vector zones ####
#### Recopilado por Lorena GonzÃ¡lez,  Septiembre 2019                          ####
####___________________________________________________________________________####
#### There are two options for the Inputs:
####  > A.
####    + A CSV file list of the raster, vector, output location and selected statistics. Headers:
####      * raster, vector_zone, output_Folder, zone_ID_field, if_buffer_size
####
####  > B.
####    + A folder that contains all rasters to process
####    + The vector to use as extraction zones
####  > C.
####    + raster
####    + vector
####
####    - Indicate the selected statistics
####    - The statistic table outputs are located at in the root folder of the raster location
####
#### For  the outputs:
####  + individual file per raster with all statistics
####  + datafile with all the bands and dates extracted per field
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("functions_extract.R") #Check that this is in the working directory
#require(raster)
tryCatch({ ## Put it all inside a handle error function
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ ## CSV list of inputs
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ # Process all rasters in a folder
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ ## Ask for Raster file
####EXTRACT####
r_file <- askRaster() #Get th raster name
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))},
warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
###################################################################################
#### Script to extract the values from multiband rasters based on vector zones ####
#### Recopilado por Lorena GonzÃ¡lez,  Septiembre 2019                          ####
####___________________________________________________________________________####
#### There are two options for the Inputs:
####  > A.
####    + A CSV file list of the raster, vector, output location and selected statistics. Headers:
####      * raster, vector_zone, output_Folder, zone_ID_field, if_buffer_size
####
####  > B.
####    + A folder that contains all rasters to process
####    + The vector to use as extraction zones
####  > C.
####    + raster
####    + vector
####
####    - Indicate the selected statistics
####    - The statistic table outputs are located at in the root folder of the raster location
####
#### For  the outputs:
####  + individual file per raster with all statistics
####  + datafile with all the bands and dates extracted per field
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("functions_extract.R") #Check that this is in the working directory
#require(raster)
tryCatch({ ## Put it all inside a handle error function
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ ## CSV list of inputs
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ # Process all rasters in a folder
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ ## Ask for Raster file
####EXTRACT####
r_file <- askRaster() #Get th raster name
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))},
warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
rFolder
r_list
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(r_file)
#extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
#list the rasters inside the folder
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "*.tif$") # Select only Tif files, for example
r_list
for (r_file in r_list) {
####EXTRACT####
print(r_file)
#extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
for (r_file in r_list) {
####EXTRACT####
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
outFolder
